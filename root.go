// SPDX-FileCopyrightText: 2021 Iwan Aucamp
//
// SPDX-License-Identifier: CC0-1.0 OR Apache-2.0

package rdf4go

////////////////////////////////////////////////////////////////////////////////
// type Term
////////////////////////////////////////////////////////////////////////////////

// Term ...
type Term interface {
	// String ...
	String() string
}

////////////////////////////////////////////////////////////////////////////////
// type Subject
////////////////////////////////////////////////////////////////////////////////

// Subject ...
type Subject interface {
	Term
	isSubjectType()
}

////////////////////////////////////////////////////////////////////////////////
// type Predicate
////////////////////////////////////////////////////////////////////////////////

// Predicate ...
type Predicate interface {
	Term
	isPredicateType()
}

////////////////////////////////////////////////////////////////////////////////
// type Object
////////////////////////////////////////////////////////////////////////////////

// Object ...
type Object interface {
	Term
	isObjectType()
}

////////////////////////////////////////////////////////////////////////////////
// type BNode
////////////////////////////////////////////////////////////////////////////////

// BNode ...
type BNode interface {
	isSubjectType()
	isObjectType()
	Id() string
	String() string
}

////////////////////////////////////////////////////////////////////////////////
// type IRI
////////////////////////////////////////////////////////////////////////////////

// IRI ...
type IRI interface {
	isSubjectType()
	isPredicateType()
	isObjectType()
	Value() string
	String() string
}

////////////////////////////////////////////////////////////////////////////////
// type Literal
////////////////////////////////////////////////////////////////////////////////

// Literal ...
type Literal interface {
	isObjectType()
	String() string
	Lang() *string
	DataType() *IRI
}

////////////////////////////////////////////////////////////////////////////////
// type Triple
////////////////////////////////////////////////////////////////////////////////

// Triple ...
type Triple interface {
	Subject() Subject
	Predicate() Predicate
	Object() Object
}

////////////////////////////////////////////////////////////////////////////////
// type Triple
////////////////////////////////////////////////////////////////////////////////

// ValueFactory ...
type ValueFactory interface {
	NewBNode(id *string) (*BNode, error)
	NewIRI(iri string) (*IRI, error)
	NewLiteral(value string, dataType *IRI, lang *string) (*Literal, error)
	NewTriple(subj Subject, pred Predicate, obj Object) (*Triple, error)
}

////////////////////////////////////////////////////////////////////////////////
// type RDFParser
////////////////////////////////////////////////////////////////////////////////

type RDFParser interface {
	parse() error
}

type NewRDFParser = func() (*RDFParser, error)
